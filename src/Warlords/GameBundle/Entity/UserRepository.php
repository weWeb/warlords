<?php

namespace Warlords\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * Since allies table is not an entity; it's difficult to use createQueryBuilder().
 * Raw sql is used in this class.
 */
class UserRepository extends EntityRepository
{
	// Find all confirmed ally
	public function getAllyConfirmed($id)
	{
	
	    $em = $this->getEntityManager();
	    
	    $sql= 'SELECT p.user_id FROM playerStats p JOIN (SELECT a1.* FROM allies a1 JOIN allies a2 ON a1.user_id = a2.ally_user_id AND a2.user_id = a1.ally_user_id WHERE a1.user_id =  :current_user) AS a ON p.user_id = a.ally_user_id';
	    
            $qb = $em->getConnection()->prepare($sql);

            $qb->bindValue('current_user', $id);
            
            $qb->execute();

            return $qb->fetchAll();


 
	}
	
	
	// Find all requesting ally
	public function getAllyRequesting($id)
	{
	
	    $em = $this->getEntityManager();
	    
	    $sql= 'SELECT p.user_id FROM playerStats p JOIN ( SELECT a1.* FROM allies a1 LEFT JOIN allies a2 ON a1.user_id = a2.ally_user_id AND a2.user_id = a1.ally_user_id WHERE a1.user_id = :current_user AND a2.user_id IS NULL) AS a ON p.user_id = a.ally_user_id';
	    
            $qb = $em->getConnection()->prepare($sql);

            $qb->bindValue('current_user', $id);
            
            $qb->execute();

            return $qb->fetchAll();


 
	}
	
	
	// Find all waiting ally
	public function getAllyWaiting($id)
	{
	
	    $em = $this->getEntityManager();
	    
	    $sql= 'SELECT p.user_id FROM playerStats p JOIN ( SELECT a1.* FROM allies a1 LEFT JOIN allies a2 ON a1.user_id = a2.ally_user_id AND a2.user_id = a1.ally_user_id WHERE a1.ally_user_id = :current_user AND a2.user_id IS NULL) AS a ON p.user_id = a.user_id';
	    
            $qb = $em->getConnection()->prepare($sql);

            $qb->bindValue('current_user', $id);
            
            $qb->execute();

            return $qb->fetchAll();


 
	}
	

	
}
