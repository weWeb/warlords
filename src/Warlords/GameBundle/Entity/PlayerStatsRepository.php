<?php

namespace Warlords\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PlayerStatsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerStatsRepository extends EntityRepository
{

	// Get players by Level
	public function getPlayerByLevel($level, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->where('p.level <= :player_lvl_up AND p.level >= :player_lvl_down')
				->addOrderBy('p.level','DESC')
				->setParameter('player_lvl_up', ($level + 0) + 2)
				->setParameter('player_lvl_down', ($level + 0) - 2);
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	}
	
	// Get players by Gold
	public function getPlayerByGold($gold, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->where('p.gold <= :player_gold_up AND p.gold >= :player_gold_down')
				->addOrderBy('p.gold','DESC')
				->setParameter('player_gold_up', ($gold + 0) * 1.5)
				->setParameter('player_gold_down', floor(($gold + 0) * 0.5));
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	}
	
	// Get players by number of infantry
	public function getPlayerByInfantry($infantry, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->where('p.infantry <= :player_infantry_up AND p.infantry >= :player_infantry_down')
				->addOrderBy('p.infantry','DESC')
				->setParameter('player_infantry_up', ($infantry + 0) * 1.5)
				->setParameter('player_infantry_down', floor(($infantry + 0) * 0.5));
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	} 
	
	// Get players by number of knights
	public function getPlayerByKnight($knights, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->where('p.knights <= :player_knights_up AND p.knights >= :player_knights_down')
				->addOrderBy('p.knights','DESC')
				->setParameter('player_knights_up', ($knights + 0) * 1.5)
				->setParameter('player_knights_down', floor(($knights + 0) * 0.5));
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	}
	// Get players by number of calvary
	public function getPlayerByCalvary($calvary, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->where('p.calvary <= :player_calvary_up AND p.knights >= :player_calvary_down')
				->addOrderBy('p.calvary','DESC')
				->setParameter('player_calvary_up', ($calvary + 0) * 1.5)
				->setParameter('player_calvary_down', floor(($calvary + 0) * 0.5));
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	}
	
	// Get players by number of land
	public function getPlayerByLand($land, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->where('p.land <= :player_land_up AND p.land >= :player_land_down')
				->addOrderBy('p.land','DESC')
				->setParameter('player_land_up', ($land + 0) * 1.5)
				->setParameter('player_land_down', floor(($land + 0) * 0.5));
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	}
	// Get players by fame
	public function getPlayerByFame($fame, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->where('p.fame <= :player_fame_up AND p.fame >= :player_fame_down')
				->addOrderBy('p.fame','DESC')
				->setParameter('player_fame_up', ($fame + 0) * 1.5)
				->setParameter('player_fame_down', floor(($fame + 0) * 0.5));
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	} 
	
	
	// Get players by username will wildcards 
	// return all username start with param $username
	public function getPlayerByUsername($username, $limit = 25)
	{
		$qb = $this->createQueryBuilder('p')
				->select('p')
				->innerjoin('p.user', 'User')
				->where('User.username LIKE :player_username')
				->addOrderBy('User.username','DESC')
				->setParameter('player_username', $username . '%');
		
		if (false === is_null($limit))
       	 		$qb->setMaxResults($limit);
		
    		return $qb->getQuery()
              		->getResult();		
		
	} 
		
}
